@using AoC2024.Blazor.Parsers.Week3;
@using System.Linq;
@using System.Text
@using System.Text.RegularExpressions
@using AoC2024.Blazor.Extensions;
@using AoC2024.Blazor.Models
@using AoC2024.Blazor.Parsers.Week2

@page "/Day10"
@rendermode InteractiveServer

<PageTitle>Day10</PageTitle>

<h1>Hoof It - Trail Generator</h1>
<p>
    <input type="checkbox" @bind=IsRatingDistinctHikingTrails/> <label>Rate distinct hiking trails </label>
</p>
<p>
    <span>Input</span>
    <textarea @bind=input></textarea>
</p>

<button class="btn btn-primary" @onclick="ComputeInput">Compute</button>

<p>Checksum: <b>@total</b></p>
@foreach(var grid in verboseResults){
    <p>
        <AoC._2024.Blazor.Components.Grids.CharGrid Content="grid"></AoC._2024.Blazor.Components.Grids.CharGrid>
    </p>
}

@code {
    private string rawInput = @"89010123
78121874
87430965
96549874
45678903
32019012
01329801
10456732";
    private string input {
        get => rawInput;
        set {
            rawInput = value;
            ComputeInput();
        }
    }

    private bool IsRatingDistinctHikingTrails = true;
    private List<char[][]> verboseResults = [];
    private double total = 0;

    private void ComputeInput()
    {
        // Reset output
        total = 0; verboseResults = [];
        
        var sourceGrid = rawInput.ParseDigitGrid();

        var trailHeads = sourceGrid.SelectMany((row, rowIndex) => row.Select((_, colIndex) => new GridCell<int>(rowIndex, colIndex, sourceGrid)))
            .Where(cell => cell.Value == 0)
            .ToArray();

        foreach (var trailHead in trailHeads)
        {
            var trails = MapTrails(trailHead, [trailHead], []);
            
            foreach(var trail in trails)
            {
                if(verboseResults.Count < 10)
                    verboseResults.Add(DrawGrid(trail));
                total++;
            }
        }
    }

    private GridCell<int>[][] MapTrails(GridCell<int> currentCell, GridCell<int>[] visited, List<string> trailEnds)
    {
        if (currentCell.Value == 9 && (IsRatingDistinctHikingTrails || !trailEnds.Contains(currentCell.ToString())))
        {
            trailEnds.Add(currentCell.ToString());
            return [visited];
        }
        var nextTrailSteps = currentCell.AdjacentCells()
            .Where(x => x.Value == currentCell.Value + 1);

        return nextTrailSteps.SelectMany(step => MapTrails(step, visited.Concat([step]).ToArray(), trailEnds))
            .ToArray();
    }

    private char[][] DrawGrid(GridCell<int>[] visitedCells)
    {
        var grid = visitedCells.First()
            .Grid
            .Select(row => row.Select(col => '.').ToArray())
            .ToArray();
        foreach (var cell in visitedCells)
            grid[cell.Row][cell.Col] = cell.Value.ToString().First();
        return grid;
    }
}