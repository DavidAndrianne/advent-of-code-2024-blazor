@using AoC2024.Blazor.Parsers.Week3;
@using System.Linq;
@using System.Text
@using System.Text.RegularExpressions
@using AoC2024.Blazor.Extensions;
@using AoC2024.Blazor.Models
@using AoC2024.Blazor.Parsers.Week2

@page "/Day9"
@rendermode InteractiveServer

<PageTitle>Day9</PageTitle>

<h1>Disk Fragmenter</h1>
<p>
    <span>Input</span>
    <input type="text" @bind=input/>
</p>

<button class="btn btn-primary" @onclick="ComputeInput">Compute</button>

<p>Checksum: <b>@total</b></p>
<pre>
@foreach(var res in verboseResults)
    @res
</pre>

@code {
    private string rawInput = @"2333133121414131402";
    private string input {
        get => rawInput;
        set {
            rawInput = value;
            ComputeInput();
        }
    }
    
    private string[] verboseResults = [];
    private double total = 0;

    private void ComputeInput()
    {
        // Reset output
        total = 0; verboseResults = [];
        
        var files = rawInput.ParseDiskSpace()
            .ToDiskOverview();
        
        List<string> results = [files+"\n"];
        while (!IsOptimized(files))
        {
            var lastFileIndex = files.LastIndexOf(c => c != FileOnDisk.Empty);
            if (!lastFileIndex.HasValue) throw new ApplicationException("No digit found");
            
            var firstEmptyIndex = files.FirstIndexOf(c => c == FileOnDisk.Empty);
            if (!firstEmptyIndex.HasValue) throw new ApplicationException("No whitespace found");
            
            files = files.Swap(firstEmptyIndex.Value, lastFileIndex.Value);
            if(results.Count < 100) results.Add(files+"\n");
        }

        verboseResults = results.ToArray();
        total = files.Where(c => c != FileOnDisk.Empty)
            .Select(FileOnDisk.IdToInt)
            .Select((id, i) => (double)id * i)
            .Sum();
    }

    private static readonly Regex OptimalFormat = new($"^[^\\{FileOnDisk.Empty}]+\\{FileOnDisk.Empty}+$");
    private static bool IsOptimized(string disk) => OptimalFormat.IsMatch(disk);
}